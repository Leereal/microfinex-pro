version: "3.9"

services:
  # Elasticsearch service (commented out)
  # es:
  #   image: elasticsearch:7.17.9
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - microfinex-api

  api:
    build:
      context: ./backend
      dockerfile: ./docker/local/django/Dockerfile
    volumes:
      - ./backend:/app:z
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - "8000"
    env_file:
      - ./backend/.envs/.local/.django
      - ./backend/.envs/.local/.postgres
    depends_on:
      # - postgres
      - mailhog
      - redis
      # - es
    command: /start
    networks:
      - microfinex-api

  # Frontend service (commented out)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: ./docker/local/Dockerfile
  #   restart: on-failure
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   env_file:
  #     - ./frontend/.env
  #   networks:
  #     - microfinex-api

  # PostgreSQL service (commented out)
  # postgres:
  #   build:
  #     context: .
  #     dockerfile: ./docker/local/postgres/Dockerfile
  #   volumes:
  #     - local_postgres_data:/var/lib/postgresql/data
  #     - local_postgres_data_backups:/backups
  #   env_file:
  #     - ./.envs/.local/.postgres
  #   networks:
  #     - microfinex-api

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "8025:8025"
    networks:
      - microfinex-api

  redis:
    image: redis:7-alpine
    networks:
      - microfinex-api

  celery_worker:
    build:
      context: ./backend
      dockerfile: ./docker/local/django/Dockerfile
    command: /start-celeryworker
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.envs/.local/.django
      - ./backend/.envs/.local/.postgres
    depends_on:
      - redis
      # - postgres
      - mailhog
    networks:
      - microfinex-api

  flower:
    build:
      context: ./backend
      dockerfile: ./docker/local/django/Dockerfile
    command: /start-flower
    volumes:
      - flower_data:/data
    env_file:
      - ./backend/.envs/.local/.django
      - ./backend/.envs/.local/.postgres
    ports:
      - "5555:5555"
    depends_on:
      - redis
      # - postgres
    networks:
      - microfinex-api

  nginx:
    restart: always
    depends_on:
      - api
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    build:
      context: ./backend/docker/local/nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80" # 8080 is the host which we can access in the browser locally mapping to 80 in the container
    networks:
      - microfinex-api

networks:
  microfinex-api:
    driver: bridge

volumes:
  static_volume:
  media_volume:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  flower_data: {}
